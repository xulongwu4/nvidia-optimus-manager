#!/usr/bin/env python3

import glob
import os
import sys
import re
import subprocess
import shutil

from copy import deepcopy
from subprocess import Popen, PIPE, CalledProcessError, DEVNULL, check_output


class Switcher(object):

    def __init__(self):
        if not self._validate_setting():
            sys.stdout.write('The program is not supported on current platform\nExiting ...\n')
            sys.exit(1)

        self._pci_id = self._get_pci_id()
        self._power_profile_path = '/sys/bus/pci/devices/%s/power' % self._pci_id
        self._ldm_conf_file = '/etc/X11/xorg.conf.d/00-ldm.conf'
        self._ldm_hybrid_file = '/var/lib/linux-driver-management/hybrid'
        self._blacklist_file = '/usr/lib64/modprobe.d/blacklist-nvidia.conf'
        self._opengl_settings = {'intel': 'Intel', 'hybrid': 'Intel', 'nvidia': 'NVIDIA'}

    def _validate_setting(self):
        if not self._check_ldm():
            sys.stdout.write('The current configuration is not supported\n\n--- The linux-driver-management program is not installed ---\n\n')
            return False

        if not self._check_optimus():
            sys.stdout.write('The current configuration is not supported\n\n--- NVIDIA Optimus hardware is not detected ---\n\n')
            return False

        if not self._check_nouveau():
            sys.stdout.write('The current configuration is not supported\n\n--- The nouveau driver needs to be unloaded ---\n\n')
            return False

        if not self._check_nvidia_driver():
            sys.stdout.write('The current configuration is not supported\n\n--- NVIDIA proprietary driver is not installed ---\n\n')
            return False

        if not self._check_pciutils():
            sys.stdout.write('The current configuration is not supported\n\n--- Command "lspci" cannot be found ---\n\n')
            return False

        return True

    def _check_ldm(self):
        return os.path.exists('/usr/bin/linux-driver-management')

    def _check_optimus(self):
        p1 = Popen(['/usr/bin/linux-driver-management', 'status'], stdout=PIPE)
        status = subprocess.call(['grep', '-i', 'optimus'], stdin=p1.stdout, stdout=DEVNULL)
        return not status

    def _check_nouveau(self):
        p1 = Popen(['lsmod'], stdout=PIPE)
        status = subprocess.call(['grep', 'nouveau'], stdin=p1.stdout, stdout=DEVNULL)
        return status

    def _check_nvidia_driver(self):
        status = subprocess.call(['modinfo', 'nvidia'], stdout=DEVNULL, stderr=DEVNULL)
        return not status

    def _check_pciutils(self):
        return os.path.exists('/usr/bin/lspci')

    def _get_pci_id(self):
        # Vendor ID '10de' is NVIDIA Corporation
        pci_info = check_output(['lspci', '-D', '-d', '10de::']).decode('utf-8')
        return pci_info.split()[0]

    def _enable_power_management(self):
        p1 = Popen(['echo', 'auto'], stdout=PIPE)
        subprocess.call(['/usr/bin/tee', self._power_profile_path + '/control'], stdin=p1.stdout, stdout=DEVNULL)

    def _is_power_management_enabled(self):
        try:
            settings = open(self._power_profile_path + '/control', 'r')
            status = settings.read().strip()
        except:
            return 'unknown'

        if status == 'auto':
            return True
        elif status == 'on':
            return False
        else:
            return 'unknown'

    def _get_profile(self):

        opengl_vendor = self._get_opengl_vendor()

        if opengl_vendor == 'NVIDIA':
            return 'nvidia'
        elif opengl_vendor == 'Intel':
            if self._is_nvidia_offloaded():
                return 'intel';
            else:
                return 'hybrid'
        else:
            return 'unknown'

    def _get_opengl_vendor(self):
        try:
            vendor_str = check_output('glxinfo | grep -i opengl | grep -i vendor', shell=True, stderr=DEVNULL).decode('utf-8').lower()

            if 'nvidia' in vendor_str:
                return 'NVIDIA'
            elif 'intel' in vendor_str:
                return 'Intel'
            else:
                return 'unknown'
        except:
            return 'unknown'

    def _get_nvidia_card_power_status(self):
        try:
            settings = open(self._power_profile_path + '/runtime_status', 'r')
            return settings.read().strip()
        except:
            return 'unknown'

    def print_configuration(self):
        profile = self._get_profile()
        print('Current profile: %s' % profile)

        vendor = self._get_opengl_vendor()
        print('OpenGL vendor: %s' % vendor)

        power = self._get_nvidia_card_power_status()
        print('Discrete graphics card power status: %s' % power)

        return True

    def enable_profile(self, profile):
        current_profile = self._get_profile()
        current_opengl_vendor = self._get_opengl_vendor()

        if profile == current_profile:
            # No need to do anything if we're already using the desired profile
            sys.stdout.write('Info: the %s profile is already set\n' % (profile))
            return True

        sys.stdout.write('Info: selecting the %s profile\n' % (profile))

        new_opengl_vendor = self._opengl_settings[profile]

        if profile == 'intel':
            self._blacklist_nvidia()
        else:
            self._nuke_blacklist_file()

        if profile == 'nvidia':
            self._ldm_configure()
        else:
            self._nuke_ldm_settings()

        if current_opengl_vendor != new_opengl_vendor:
            sys.stdout.write('Log out to take effect\n')
            return True

        self.autoconfigure()

        return True

    def _ldm_configure(self):
        subprocess.call(['/usr/bin/linux-driver-management', 'configure', 'gpu'], stdout=DEVNULL, stderr=DEVNULL)

    def _enable_nvidia(self):
        if self._is_nvidia_offloaded():
            self._load_nvidia_driver()

    def _disable_nvidia(self):
        self._nuke_ldm_settings()
        if not self._is_nvidia_offloaded():
            self._unload_nvidia_driver()

    def autoconfigure(self):
        # Power management
        if not self._is_power_management_enabled():
            self._enable_power_management()

        # Profile management
        if os.path.exists(self._blacklist_file):
            self._disable_nvidia()
        else:
            self._enable_nvidia()

    def _nuke_blacklist_file(self):
        try:
            os.unlink(self._blacklist_file)
        except:
            pass

    def _nuke_ldm_conf_file(self):
        try:
            os.unlink(self._ldm_conf_file)
        except:
            pass

    def _nuke_ldm_hybrid_file(self):
        try:
            os.unlink(self._ldm_hybrid_file)
        except:
            pass

    def _nuke_ldm_settings(self):
        self._nuke_ldm_conf_file()
        self._nuke_ldm_hybrid_file()

    def _blacklist_nvidia(self):
        blacklist_text = '''# Do not modify
# This file was generated by nvidia-optimus-manager
blacklist nvidia
blacklist nvidia_drm
blacklist nvidia_uvm
blacklist nvidia_modeset'''
        blacklist_fd = open(self._blacklist_file, 'w')
        blacklist_fd.write(blacklist_text)
        blacklist_fd.close()

    def _unload_nvidia_driver(self):
        subprocess.call(['/usr/bin/systemctl', 'stop', 'nvidia-persistenced'])
        subprocess.call(['/sbin/modprobe', '-r', 'nvidia_drm'])
        subprocess.call(['/sbin/modprobe', '-r', 'nvidia_uvm'])
        subprocess.call(['/sbin/modprobe', '-r', 'nvidia_modeset'])
        subprocess.call(['/sbin/modprobe', '-r', 'nvidia'])

    def _load_nvidia_driver(self):
        # modprobe can correctly load nvidia module without reboot
        # as long as the blacklist-nvidia.conf file is deleted
        subprocess.call(['/sbin/modprobe', 'nvidia'])

    def _is_nvidia_offloaded(self):
        p1 = Popen(['lsmod'], stdout=PIPE)
        status = subprocess.call(['grep', 'nvidia'], stdin=p1.stdout, stdout=DEVNULL)
        return status

def check_root():
    if not os.geteuid() == 0:
        sys.stderr.write("This operation requires root privileges\n")
        exit(1)

def handle_query_error():
    sys.stderr.write("Error: no profile can be found\n")
    exit(1)

def usage():
    sys.stderr.write("Usage:\n")
    sys.stderr.write("    %s status\n" % (sys.argv[0]))
    sys.stderr.write("    %s configure nvidia|hybrid|intel\n" % (sys.argv[0]))
    sys.stderr.write("    %s autoconfigure\n" % (sys.argv[0]))

if __name__ == '__main__':
    try:
        arg = sys.argv[1]
    except IndexError:
        arg = None

    switcher = Switcher()

    status = 0

    if arg == 'status' and len(sys.argv) == 2:
        if not switcher.print_configuration():
            handle_query_error()
        else:
            status = 1
    elif arg == 'autoconfigure' and len(sys.argv) == 2:
        check_root()
        switcher.autoconfigure()
        status = 1
    elif arg == 'configure' and len(sys.argv) == 3:
        arg = sys.argv[2]
        if arg == 'intel' or arg == 'nvidia' or arg == 'hybrid':
            check_root()
            switcher.enable_profile(arg)
            status = 1

    if not status:
        usage()
        sys.exit(1)

    exit(0)
